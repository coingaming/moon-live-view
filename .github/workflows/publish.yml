name: Publish MoonLiveView to Hex.pm
permissions:
  contents: read
on:
  push:
    tags:
      - "v*"

# So only the latest run is executed. Used to avoid concurrency issues.
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  publish:
    name: Publish moon_live_view library
    runs-on: ubuntu-22.04
    env:
      HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

    if: ${{ !endsWith(github.ref, '-docs') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Erlang/OTP and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: 27
          elixir-version: 1.18.0

      - name: Setup Node.js for Changeset
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install umbrella dependencies
        run: mix deps.get

      - name: Check formatting (umbrella level)
        run: mix format --check-formatted
        continue-on-error: true

      - name: Run tests for moon_live_view library
        run: |
          cd apps/moon_live_view
          mix test

      - name: Verify library package can be built
        run: |
          cd apps/moon_live_view
          mix hex.build

      - name: Publish moon_live_view library to Hex.pm
        run: |
          cd apps/moon_live_view
          mix hex.publish --yes
        env:
          HEX_API_KEY: ${{ env.HEX_API_KEY }}

  publish-docs:
    name: Publish moon_live_view docs
    runs-on: ubuntu-latest
    outputs:
      IMAGE: ${{ env.IMAGE }}

    if: endsWith(github.ref, '-docs')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag version
        id: get_version
        run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create Docs Image Name
        run: echo "IMAGE=heathmont/moon-live-docs:${{ env.TAG_VERSION }}" >> $GITHUB_ENV

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.MOON_DOCKER_USERNAME }}
          password: ${{ secrets.MOON_DOCKER_TOKEN }}

      - name: Build and push Docs Image
        uses: docker/build-push-action@v6
        with:
          context: ./apps/moon_live_view_docs # Root context
          file: ./apps/moon_live_view_docs/Dockerfile # Root Dockerfile
          push: true
          tags: ${{ env.IMAGE }}
          no-cache: true
          build-args: |
            HEX_API_KEY=${{ secrets.HEX_API_KEY }}
            SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }}

  deployment:
    name: Update Stacks Docker Compose and trigger Deployment
    runs-on: ubuntu-latest
    needs: [publish-docs]
    permissions:
      contents: write
    if: always() && needs.publish-docs.result == 'success'
    steps:
      - name: Set IMAGE from successful job
        run: |
          echo "IMAGE=${{ needs.publish-docs.outputs.IMAGE }}" >> $GITHUB_ENV
      - name: Checkout Stacks Repo
        uses: actions/checkout@v4
        with:
          repository: coingaming/stacks
          token: ${{ secrets.MOON_GH_TOKEN }}
          ref: sportsbet-t2
          path: stacks
      - name: Update Docker Compose with New Image
        working-directory: stacks
        run: |
          yq -i '.services.moon-live-docs.image = "${{ env.IMAGE }}"' docker-compose.moon.yml

      - name: Commit and Push Changes to docker-compose file
        working-directory: stacks
        run: |
          git config user.email "${{ env.ROBOT_EMAIL }}"
          git config user.name "${{ env.ROBOT_NAME }}"
          git commit -am "Updated Docker image to ${{ env.IMAGE }}"
          git push origin sportsbet-t2
